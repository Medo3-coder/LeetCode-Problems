
//------------------------------------------solution 1 ---------------------------


class Solution {
public:
    int climbStairs(int n) {
        
//if n <= 0, then the number of ways should be zero.
        
// if n == 1, then there is only way to climb the stair.
       
//if n == 2, then there are two ways to climb the stairs. One solution is one step by another; the other one is two steps at one time.
        
        
        if(n <= 0) return 0 ;
        if(n == 1) return 1 ;
        if(n == 2) return 2 ;
        
        int one_step_before = 2 ;
        int two_step_before = 1 ;
        int all_ways = 0;
        
      for(int i=2; i<n; i++){
     
            all_ways =  one_step_before + two_step_before;
            two_step_before = one_step_before;
            one_step_before = all_ways;
        
      }
        return all_ways;
        
    }
};


//--------------------------------------------------solution 2 ---------------------------------- Bottom Up Approach

Runtime: 0 ms, faster than 100.00% of C++ online submissions for Climbing Stairs.
Memory Usage: 5.9 MB, less than 52.68% of C++ online submissions for
-------------------------------

class Solution {
public:
    int climbStairs(int n) {
       
        if(n == 1)
        {
            return 1 ;
        }
        if(n == 2)
        {
            return 2;
        }
        
        int dp[n + 1];
        dp[0] = 0 ;
        dp[1] = 1 ;
        dp[2] = 2 ;
        
        for(int i = 3 ; i <= n ; i++)
        {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        
        return dp[n];
        
    }
};



//------------------------------------


class Solution {
public:
    int climbStairs(int n) {
        
  vector<int> dp(n+1);
        dp[0]=1;
        dp[1]=1;
        for(int i=2;i<=n;i++){
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }
};
