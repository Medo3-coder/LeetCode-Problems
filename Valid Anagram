//242. Valid Anagram

class Solution {
public:
    bool isAnagram(string s, string t) {
         
        // Get lengths of both strings
        int str1 = s.length() ;
        int str2 = t.length() ; 
        
        //if length of both two strings are not the same 
        // then return false 
        if (str1 != str2)
        {
            return false ;
        }
        
        
         // Sort both the strings
            sort(s.begin() , s.end());
            sort(t.begin() , t.end());
        
               // Compare sorted strings
    for(int i = 0 ; i < str1 ; i++)
    {
        if(s[i] != t[i])
            return false ;
    }
    return true ;
        
          }
    
  
    
   
};

/*

class Solution {
public:
    bool isAnagram(string s, string t) {
         if(s.length() != t.length()){
            return false ;
        }
        
        
        if (is_permutation(begin(s) , end(s) , begin(t)))
        {
            return true ;
        }
        else
        {
            return false ;
        }
        
        
          }
    
   
};

*/

/*        
class Solution {
public:
    bool isAnagram(string s, string t) {
        
        if(s == t)
        {
            return true ;
        }
        
        if(s.size() != t.size())
        {
            return false ;
        }
    
          int umap[26]={};
        
        for(int i = 0 ; i < s.size() ; i++)
        {
            umap[s[i] - 'a']++;   //  c - a = 2 - 0 = 2  like this 
            umap[t[i] - 'a']--;
        }
        
        for(int i = 0 ; i < 26 ; i++)
        {
            if(umap[i])
            {
                return false ;
            }
        }
        
        return true ;
        
        
        
        
        
    }
};


//https://www.youtube.com/watch?v=R3YtsyY3Rmw
*/
