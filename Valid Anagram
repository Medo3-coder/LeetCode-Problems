//242. Valid Anagram

class Solution {
public:
    bool isAnagram(string s, string t) {
         
        // Get lengths of both strings
        int str1 = s.length() ;
        int str2 = t.length() ; 
        
        //if length of both two strings are not the same 
        // then return false 
        if (str1 != str2)
        {
            return false ;
        }
        
        
         // Sort both the strings
            sort(s.begin() , s.end());
            sort(t.begin() , t.end());
        
               // Compare sorted strings
    for(int i = 0 ; i < str1 ; i++)
    {
        if(s[i] != t[i])
            return false ;
    }
    return true ;
        
          }
    
  
    
   
};

/*

class Solution {
public:
    bool isAnagram(string s, string t) {
         if(s.length() != t.length()){
            return false ;
        }
        
        
        if (is_permutation(begin(s) , end(s) , begin(t)))
        {
            return true ;
        }
        else
        {
            return false ;
        }
        
        
          }
    
   
};

*/

/*        
class Solution {
public:
    bool isAnagram(string s, string t) {
        
      if (s.empty() && t.empty())
      {
          return true ;
      }
        int n = s.length() ;
        
        if(n != t.length()){
            return false ;
        }
        
        
       vector<int> anagramS(26,0);
       vector<int> anagramT(26,0);
        
        // walking in all string 
        
        for(int i = 0 ; i < n ; i++ )
        {
            anagramS[s[i] -'a']++ ;
            anagramT[t[i] -'a']++ ; 
            
        }
        
        // walking in the frequancy vector 
        
        for (int i = 0 ; i < 26 ; i++){
            if(anagramS[i] != anagramT[i])
            {
                return false ;
            }
      
         
            
        }
     
                return true ; 
            
    }
    
   
};
*/
