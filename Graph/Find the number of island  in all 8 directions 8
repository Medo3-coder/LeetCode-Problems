class Solution {
  
  private:
  void bfs(int row , int col , vector<vector<int>>&vis  , vector<vector<char>>& grid)
  {
       // mark it visited
      vis[row][col] = 1 ;
      queue<pair<int , int>>q ;
       // push the node in queue
      q.push({row , col});
      int n = grid.size();
      int m = grid[0].size();
      while(!q.empty())
      {
          int row = q.front().first;
          int col = q.front().second;
          q.pop();
          
          // traverse in the neighbours and mark them if its a land 
          for(int delRow = -1 ; delRow <= 1 ; delRow++)
          {
              for(int delCol = -1 ; delCol <= 1 ; delCol++)
              {
                  int nRow = row + delRow ;
                  int nCol = col + delCol ;
                  
            if(nRow >= 0 && nRow < n && nCol >= 0 && nCol < m && !vis[nRow][nCol] && grid[nRow][nCol] == '1' )
                 {
                     vis[nRow][nCol] = 1 ;
                     q.push({nRow , nCol});
                 }
              }
          }
          
      }
  }
    
  public:
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        
        int n = grid.size();
        int m = grid[0].size();
         // create visited array and initialise to 0
        vector<vector<int>>vis(n , vector<int>(m , 0));
        int count = 0 ;
        for(int row = 0 ; row < n  ; row++)
        {
            for(int col = 0 ; col < m ; col++)
            {
                if(!vis[row][col] and grid[row][col] == '1')
                {
                    count++;
                    bfs(row , col , vis , grid );
                }
            }
        }
        
        return count ;
    }
};
