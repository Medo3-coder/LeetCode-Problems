class Solution 
{
    public:
    //Function to find distance of nearest 1 in the grid for each cell.
	vector<vector<int>>nearest(vector<vector<int>>grid)
	{
	    int n = grid.size();
	    int m = grid[0].size();
	    // visited and distance matrix
	    vector<vector<int>> vis(n ,vector<int>(m , 0));
	    vector<vector<int>> dist(n ,vector<int>(m , 0));
	       // <coordinates, steps>
	    queue<pair<pair<int ,int> ,int>> q ;
	    // traverse the matrix    tc- n*m
	    for(int i = 0 ; i < n ; i++)
	    {
	        for(int j = 0 ; j < m ; j++)
	        {
	            if(grid[i][j] == 1)
	            {
	                q.push({{i , j} , 0});
	                vis[i][j] = 1 ;
	            }
	            else
	            {
	                vis[i][j] = 0 ;
	            }
	        }
	    }
	    
	    //tc n*m *4
	    while(!q.empty())
	    {
	        int row = q.front().first.first;
	        int col = q.front().first.second;
	        int steps = q.front().second ;
	        q.pop();
	        
	        dist[row][col] = steps ;
	        
	        for(int delRow = - 1 ; delRow <= 1 ; delRow++)
	        {
	            for(int delCol = -1 ; delCol <= 1 ; delCol++)
	            {
	                //because we seacrh in only 4 directions
	                if(abs(delRow) == abs(delCol)) {continue ;}
	                int newRow = row + delRow   ;
	                int newCol = col + delCol ;
	                
	                if(newRow >= 0 && newRow < n && newCol >= 0 && newCol < m && vis[newRow][newCol] == 0)
	                {
	                    vis[newRow][newCol] = 1 ;
	                    q.push({{newRow , newCol} , steps + 1});
	                }
	            }
	        }
	        
	    }
	    
	    return dist ;
	}
};
