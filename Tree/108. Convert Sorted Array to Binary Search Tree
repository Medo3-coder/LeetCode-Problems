/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
          if(nums.size()== 0)
              return NULL;
      
      return   helper( nums , 0 , nums.size()-1 ) ;
        
        
    }
    
    public: TreeNode* helper(vector<int>& nums , int left , int right)
    {
        if(left > right)
            return NULL ;
        int mid = (left + right) / 2 ; 
        TreeNode* root = new TreeNode(nums[mid]);
        root->left = helper(nums , left , mid - 1);
        root->right = helper(nums , mid + 1 , right);
        return root ;
    }
   
};

 /*
    
      0  1  2 3 4 5 6    // indices
    [-10,5,-3,0,5,8,9]  // (left + right)/2 or left + (right-left)/2 
                        // (0+6)/2 = 3 this the midpoint 
             
    */
