/*
Time Complexity : O(N)

this is a recursive approach which is executed for each node in the first and second trees
the TC-> O(N1)+ O(N2) = O(N) where N1 and N2 are number of nodes in the first and second trees
respectively

/----------------------------------

Space Complexity : O(N)

the space complexity is O(1) for each execution of the method , Since we call 
the method recursively , the space complexity O(N)
 
*/


class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        
        if(root == NULL)
        {
            return true;
        }
        
      return  isMirror( root->left ,  root->right);
        
    }
    
    
private: 
    bool isMirror(TreeNode* p , TreeNode* q)
    {
         if(p == NULL && q == NULL)
         {
             return true ;
         }
        
        if(p == NULL || q == NULL)
        {
            return false ;
        }
        
        if(p->val == q->val)
        {
             return isMirror(p->left , q->right) 
             && isMirror(p->right , q->left);
        }
        
        return false ;
        
      
    }
};
