/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        
        //solution by stack iterative 
        
        TreeNode* root = new TreeNode(preorder[0]);
        
        TreeNode* p = root ; 
        
        stack<TreeNode*> st ;
        
        int i = 1 ;
        
        int size = preorder.size();
        
        while(i < size)
        {
            if(p->val > preorder[i])
            {
                p->left = new TreeNode(preorder[i]);
                st.push(p);
                p = p->left;
            }
            else
            {
                while(!st.empty() && st.top()->val < preorder[i])
                {
                  p = st.top();
                    st.pop();
                }
                
                p->right = new TreeNode(preorder[i]);
                p = p->right ;
            }
            
            i++ ;
        }
        
        return root ; 
    }
};



//------------------------------------


Runtime: 8 ms, faster than 38.84% of C++ online submissions for Construct Binary Search Tree from Preorder Traversal.
Memory Usage: 12.6 MB, less than 94.54% of C++ online submissions for Construct Binary Search Tree from Preorder Traversal.
