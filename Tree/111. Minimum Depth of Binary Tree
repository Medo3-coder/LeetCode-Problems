//------------------------------------------------BFS - 1

class Solution {
public:
    int level = 0;
    int minDepth(TreeNode* root) {
        if(!root){ return 0;}
        
        queue<TreeNode*> q;
        int level = 0;
        
        q.push(root);
        while(!q.empty()){
            int breadth = q.size();
            level++;
            for(int i=0; i<breadth; i++){
                TreeNode* parent = q.front(); 
                q.pop();
                
                if(parent->left) q.push(parent->left);
                if(parent->right) q.push(parent->right);
                
                if(!parent->left && !parent->right) return level; //leaf node
            }
        }
        
        return level;
    }
};




//-----------------------------------------------------------------------BFS - 2 (Optimized)

class Solution {
public:
int minDepth(TreeNode* root) {
        if(root == NULL){
            return 0;
        }
        
        if(root->left == NULL && root->right == NULL){
            return 1;
        }
        else if( root->left != NULL && root->right == NULL){
            return minDepth(root->left) + 1;
        }
        else if( root->left == NULL && root->right != NULL ){
            return minDepth(root->right) + 1;
        }
        else{
            return min(minDepth(root->left),minDepth(root->right)) + 1;
        }
    }
}





//---------------------------------------------------------------------------------Recursion / DFS - 2

int minDepth(TreeNode* root) {
    if (!root)  
        return 0;
    if (root->left && root->right)  
        return min(minDepth(root->left), minDepth(root->right))+1;
    return max(minDepth(root->left), minDepth(root->right))+1;
}
