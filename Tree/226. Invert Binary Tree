/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
       
        if(root == NULL)
        {
            return NULL ;
        }
        
         TreeNode*  temp =  root->left ;
         root->left = root->right ;
         root->right = temp ; 
     
         invertTree( root->left );
         invertTree( root->right );
        
        return root ;

        
    }
};










Runtime: 0 ms, faster than 100.00% of C++ online submissions for Invert Binary Tree.
Memory Usage: 9.8 MB, less than 35.30% of C++ online submissions for Invert Binary Tree.
