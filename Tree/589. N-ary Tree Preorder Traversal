/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector<int> preorder(Node* root) {
        vector<int> result ;
        preorderTraversal(root , result);
        return result ;
        
    }
    
    void preorderTraversal(Node* root , vector<int> &result)
    {
        if(root == NULL)
            return ;
        result.push_back(root->val);
        for(auto &child : root->children)
        {
            preorderTraversal(child , result) ;
        }
    }
};

//https://www.youtube.com/watch?v=3E6myDNC49I



//-----------------------------------------------------itr    sol
 

/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector<int> preorder(Node* root) {
        
        vector<int> result ;
        stack<Node*> stk ;
        
        if(root == NULL)
        {
            return result ;
        }
        
        stk.push(root);                // start by pushing the root node
        
        while(!stk.empty())      // loop till stack becomes empty
        {
            Node* curr = stk.top();     
            stk.pop() ;                    // pop the top node
            result.push_back(curr->val) ;  // and insert it into result
            
            // loop from all children from right to left & push them into stack
            for(auto it = curr->children.rbegin() ; it != curr->children.rend() ; ++it )
            {
                stk.push(*it);
            }
        }
        
        return result ;
    }
};



// [3,2,4]  to psuh into stack using rbegin()    like 4 2 3 to pop 3 at first this preorder 
