


/*
 maxProfit = max(maxProfit , prices[i] - BuyAt);
 
      first itr = (0 , 1-7) = 0 
      sec   itr = (0 , 5-1) = 4
      3rd   itr = (4 , 3-1) = 4
      4th   itr = (4 , 6-1) = 5
      5th   itr = (5 , 4-1) = 5 this the maxProfit 
 
*/

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
        
        if(prices.size() == 0 )
            return 0 ;
    
        int maxProfit = 0 ;
        int BuyAt = prices[0];   // 7
        
        for(int i = 1 ; i <= prices.size()-1 ; i++)
        {
            maxProfit = max(maxProfit , prices[i] - BuyAt);
            if(prices[i] < BuyAt)                             // 1 < 7 if true  swap
            {
                BuyAt = prices[i] ;       
                
            }
        }
        return maxProfit ;
    }
};



-------------------------------------------------------------------------------------------------------------------------






class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
      
        int res = 0 , buy = INT_MAX ;
        for(auto &price : prices)
        {
            buy = min(buy , price);
            res = max(res , price - buy );   
        }
        return res ;
    }
};
