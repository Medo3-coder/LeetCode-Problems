
/-///////////////////////


Runtime: 4 ms, faster than 80.30% of C++ online submissions for Search Insert Position.
Memory Usage: 9.7 MB, less than 55.95% of C++ online submissions for Search Insert Position.

//---------------------------------



//--------------------------------solution 1 ------------------------------

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        
     int ans=nums.size();
        
        for(int i = 0 ; i < nums.size() ; i++)
        {
            if(nums[i] >= target)
            {
                ans =  i ;
                 break;
            }
          
        }
        return ans;
        
    }
};



//--------------------------------solution 2  ------------------------ binary search------


/*
Runtime: 0 ms, faster than 100.00% of C++ online submissions for Search Insert Position.
Memory Usage: 9.8 MB, less than 55.95% of C++ online submissions for Search Insert Position.
*/


class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        
        int left = 0 ; 
        int right = nums.size() - 1 ; 
        
        int mid ;
        
        while(left <= right)
        {
             mid = left + (right - left) / 2 ;
            
            if(nums[mid] == target)
            {
                return mid ; 
            }
            else if (nums[mid] < target)
            {
                left = mid + 1 ;
            }
            else
            {
                right = mid - 1 ;
            }
        }
        
        return left ; 
        
    }
};
