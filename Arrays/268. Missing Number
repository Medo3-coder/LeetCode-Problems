Using Bit- Manipulation
Time Complexity: O(N)
Space Complexity : O(1)
---------------------------
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        
        int x1 = 0 ;
        int x2 = 0 ;
        int n = nums.size();
        
        for(int i = 0 ; i < n ; i++)
        {
            x1 = x1 ^nums[i];  // 1 ^ 0 ^ 3
            x2 = x2 ^(i + 1);  // 1 ^ 2 ^ 3
            
        }
        
        return x1 ^ x2 ;
        //  a^a=0 ,so the number present both in x1 and x2 will cancel out(become zero ) 
      //  and the element which is not present in x1 . i.e 2 will be returned by the function.
    }
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////

Using : Hasing
Time Complexity: O(N)
Space Complexity : O(N)
-----------------------------------------------
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        
        unordered_map<int , int> mp ;
        for(auto it : nums) mp[it] = 1 ;
        for(int i = 0 ; i <= nums.size() ; i++)
        {
            if(mp.find(i) == mp.end())
            {
                return i ; 
            }
        }
        
        return -1 ;
    }
};


////////////////////////////////////////////////////////////////////
Intuitive Approach
Time Complexity: O(N)
Space Complexity : O(1)


class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int sum = 0 ;
        int size = nums.size();
         // total is the sum of all numbers in the array
        int totalsum = size * (size + 1) / 2 ;  
        for(auto it : nums)
        {
            sum += it ;
        }
        
        return totalsum - sum ; 
    }
};
