//-----------------sol 1----------------------------

Runtime: 24 ms, faster than 9.60% of C++ online submissions for Move Zeroes.
Memory Usage: 20.6 MB, less than 5.97% of C++ online submissions for Move Zeroes.



//Space Complexity : O(n)O(n). Since we are creating the "ans" array to store results.
//Time Complexity: O(n)O(n). However, the total number of operations are sub-optimal. We can //achieve the same result in less number of operations

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        
        int n = nums.size();
            
        //count the zeros 
        int numZeroes = 0;
        
            for(int i = 0 ; i < n ; i++)
            {
                numZeroes += (nums[i] == 0) ;
            }
        
        // Make all the non-zero elements retain their original order.
            
            vector<int> ans ;
          for(int i = 0 ; i < n ; i++ )
          {
              if(nums[i] != 0)
              {
                  ans.push_back(nums[i]);
              }
          }
        
        //move all zeroes to the end 
        while(numZeroes--)
        {
            ans.push_back(0);
        }
        
          // Combine the result
        for(int i = 0 ; i < n ; i++)
        {
            nums[i] = ans[i];
        }
            
    }
};



//---------------------sol  2 ---------------------------------------------




//Space Complexity : O(1)O(1). Only constant space is used.

//Time Complexity: O(n)O(n). However, the total number of operations are still sub-optimal. The 
//total operations (array writes) that code does is nn (Total number of elements).


class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        
        int lastNonZeroFoundAt  = 0 ; 
        
    // If the current element is not 0, then we need to
    // append it just in front of last non 0 element we found. 
        
        for( int  i = 0 ; i < nums.size() ; i++)
        {
            if(nums[i] != 0)
            {
                nums[lastNonZeroFoundAt++] = nums[i] ;
            }
        }
        
       // After we have finished processing new elements,
       // all the non-zero elements are already at beginning of array.
       // We just need to fill remaining array with 0's.
        
        for(int i =lastNonZeroFoundAt ; i < nums.size() ; i++ )
        {
            nums[i] = 0 ;
        }
    }
};

///-----------------------sol  3 -------------------------------------




class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        
        int count = 0 ;   //points to first index
        int n = nums.size() ; 
        
        for(int i = 0 ; i < n ; i++)
        {
            if(nums[i] != 0)
            {
                swap(nums[count++] , nums[i]);
            }
        }
        
    }
};

