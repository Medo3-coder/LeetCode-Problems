//----------------------------using Two Pointers

class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        
        int left = 0 ;
        int right = numbers.size()  - 1 ;
        
       while(left <= right)
       {
           int sum = numbers[left] + numbers[right] ;
           if(sum == target)
           {
               return {left + 1   , right + 1} ;
               
           }
           else if (sum > target)
           {
               right-- ;    // to decrease the sum    //  2 + 15 = 17 > 9  right --
                                                      // 2 + 11 = 13 > 9    right --
                                                     //   2 + 7 = 9 = 9  the target                       
                                                        
           }
           else
           {
               left++;
           }
       }
        
        
         return {}; //Empty Vector Initializer
        
    }
};


//---------------------------------------------------using HashMap 

class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        
        unordered_map<int , int> map ;
    
        
        for(int i = 0 ; i < numbers.size() ; i++)
        {
            if(map.count(target  - numbers[i]))
            {
                return {map[target  - numbers[i]] , i + 1};
            }
            
             map[numbers[i]] = i + 1 ;
            
        }
        
        return { };
        
    }
};
