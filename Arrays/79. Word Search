// Given a 2D board and a word, find if the word exists in the grid.

// The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

// For example,
// Given board =

// [
//   ['A','B','C','E'],
//   ['S','F','C','S'],
//   ['A','D','E','E']
// ]
// word = "ABCCED", -> returns true,
// word = "SEE", -> returns true,
// word = "ABCB", -> returns false.



class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        
        for(int i = 0 ; i < board.size() ; i++)
        {
            for(int j = 0 ; j < board[i].size() ; j++)
            {
                 if( board[i][j] == word[0] && dfs(board , i , j , 0 , word))
                 {
                     return true ;
                 }
            }
        }
        
        return false ;
        
    }
     bool dfs(vector<vector<char>>& board, int i , int  j , int count , string word)
     {
         //if the string is complete, return true
         if(count == word.size())
             return true ;
         
         if(i < 0 || i >= board.size() || j < 0 || j >= board[i].size() || 
            board[i][j] != word[count]) 
             return false ;
         
         //get character of present position
        char temp =  board[i][j] ;
        
        //change it to other character to avoid recursively calling the same node again and again
         board[i][j] = ' ' ;
         bool found = dfs(board , i + 1 , j , count + 1 , word)
                  ||  dfs(board , i - 1 , j , count + 1 , word)
                  ||  dfs(board , i , j + 1 , count + 1 , word)
                  ||  dfs(board , i , j - 1 , count + 1 , word);
             
             //reset it.
             board[i][j] = temp;
         return found ;
     }
    
};
