Solution I - Simulation
Just simulate the process of building the steps.
Each time we increment i and add it to sum.

Time Complexity: O(sqrt(n))
Space Complexity: O(1)

class Solution {               // the standerd 
public:
    int arrangeCoins(int n) {
        long i = 0, sum = 0;
        while (sum <= n) sum += ++i;
        return i-1;
    }
};
Solution II - Binary Search
We are looking for a number that will answer this condition:
All the steps will be 1 + 2 + 3 + ... + x <= n
The formula of finding the sum is: (x(x+1))/2.
image

So we check if the current mid is less or more than n and according to that continue our regular binary search.

Time Complexity: O(logn)
Space Complexity: O(1)

class Solution {
public:
    int arrangeCoins(int n) {
        
        long low = 0 ; 
        long high = n ; 
        long total = 0;
      
        while(low <= high)
        {
            long mid = low + (high - low)/2 ;
            
            total = mid * (mid + 1)/ 2 ; // to calculate total complete rows 
                
            if(total ==n )
            {
                return mid;
            }
            else if(total <=n)
            {
                 low = mid + 1;
            }
            else
            {
                  high = mid - 1 ;
            }
        }
        return low - 1 ;
        
    }
};
