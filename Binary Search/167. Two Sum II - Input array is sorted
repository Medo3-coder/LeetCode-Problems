class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        
        int left = 0 ; 
        int right = numbers.size() - 1 ; 
        
     while(left <= right)
     {
         int sum = numbers[left] + numbers[right] ; 
         if(sum == target)
         {
               //beacuse he work in length [1 , 2 ]
              return {left+1,right+1};
         }
         else if(sum > target)
         {
             right-- ; 
         }
         else
         {
             left++;
         }
     }
         return {}; //Empty Vector Initializer
        
    }
}



//- -------------------- sol 2 




class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        
     unordered_map<int , int> two_sum ;
        vector<int> ans;  
        
        for(int i = 0 ; i < numbers.size() ; i++)
        {
          if(two_sum.count(target-numbers[i]) > 0)  
          {
             ans.push_back(two_sum[target-numbers[i]]+1);
             ans.push_back(i+1);
              return ans;
           }
            
    //if complement has not been passed by yet, modify the complement's value with its index
           two_sum[numbers[i]] = i  ; 
        }
        
    
  return ans; 
        
    }
}
