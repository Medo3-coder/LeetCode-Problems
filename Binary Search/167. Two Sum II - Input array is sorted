class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        
        int left = 0 ;
        int right = numbers.size()  - 1 ;
        
       while(left <= right)
       {
           int sum = numbers[left] + numbers[right] ;
           if(sum == target)
           {
               return {left + 1   , right + 1} ;
               
           }
           else if (sum > target)
           {
               right-- ;  
               
               // to decrease the sum   form right    
               //  2 + 15 = 17 > 9  right --
               // 2 + 11 = 13 > 9    right --
               //   2 + 7 = 9 = 9  the target   
                                                       
           }
           else
           {
               left++;
           }
       }
        
        
         return {}; //Empty Vector Initializer
        
    }
};



//- -------------------- sol 2 




class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        
     unordered_map<int , int> two_sum ;
        vector<int> ans;  
        
        for(int i = 0 ; i < numbers.size() ; i++)
        {
          if(two_sum.count(target-numbers[i]) > 0)  
          {
             ans.push_back(two_sum[target-numbers[i]]+1);
             ans.push_back(i+1);
              return ans;
           }
            
    //if complement has not been passed by yet, modify the complement's value with its index
           two_sum[numbers[i]] = i  ; 
        }
        
    
  return ans; 
        
    }
}





//-----------------------------sol 3 hash


class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        
        unordered_map<int , int> map ;
    
        
        for(int i = 0 ; i < numbers.size() ; i++)
        {
            if(map.count(target  - numbers[i]))
            {
                return {map[target  - numbers[i]] , i + 1};
            }
            
             map[numbers[i]] = i + 1 ;
            
        }
        
        return { };
        
    }
};




 
//----------------------------------------- brute force-----------------

TIME LIMIT EXCEEDED

class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        for(int i=0;i<numbers.size();i++){
            for(int j=i+1;j<numbers.size();j++){
                if(numbers[i] + numbers[j] == target){
                    return {i+1,j+1};
                }
            }
        }
        return {};
    }
};
