

// --------------------------- solution 1 ----------------------------------------



Runtime: 4 ms, faster than 91.91% of C++ online submissions for Roman to Integer.
Memory Usage: 6 MB, less than 67.76% of C++ online submissions for Roman to Integer
//-------------------------------------




class Solution {
public:
    
    int value(char ch)
    {
        switch(ch)
        {
                 case 'I' : return 1    ;
                 case 'V' : return 5    ;
                 case 'X' : return 10   ;
                 case 'L' : return 50   ;
                 case 'C' : return 100  ;
                 case 'D' : return 500  ;
                 case 'M' : return 1000 ;
                
        }
        return 0 ;
    }
    
    
    
    
    int romanToInt(string s) {
        
        if(s.size() == NULL)
        {
            return 0 ;
        }
        int res = 0 ; 
        int n= s.size();
        
        for(int i = 0 ; i < n ; i++ )
        {
             if(value(s[i])<value(s[i+1]))                   
            {
                res = res - value(s[i]);                     // IV   //5-1 = 4
            }
            else
            {
                res = res + value(s[i]) ;                    // VX  = 5 + 10 
            }
        }
        
        return res ; 
    }
};

///////////////////------------------------------------------second solutions ---------------------------------






class Solution {
public:
    int romanToInt(string s) {
        
        //edge case 
       
        if(s.size()== NULL)
            return 0 ; 
        
        
        // store Key and Value in Hash Map
        
 unordered_map<char , int> mp ={{'I',1},{'V',5},{'X',10},{'L',50},{'C',100},{'D',500},{'M',1000}};
        
      int   ans = mp[ s.at(s.size()-1) ];
        
        
        /// run loop from left to right 
        
        for(int i = s.size() - 2 ; i >= 0 ; i--)
        {
               
        char c1 = s.at(i);
        char c2 = s.at(i+1);
        
        if(mp[c1] < mp[c2])
        {
            ans = ans - mp[c1];
            
        }
        else
        {
            ans = ans + mp[c1];
        }
            
        }
     
        
        
        return ans ; 
    }
};


https://www.youtube.com/watch?v=Xy1dfcg7P-Y
