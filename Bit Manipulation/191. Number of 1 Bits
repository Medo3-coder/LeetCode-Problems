Approach 1
Iterate the bits of an unsigned integer from right by using right shift, and at each iteration check the parity of the first bit from right.

class Solution {
public:
    int hammingWeight(uint32_t n) {
        int cnt=0;  // count of set bit
        while(n>0){  // iterate until all bits are traversed
            if((n&1)>0) // check the parity of first bit from right
                ++cnt;
            n=n>>1; //n=n/2, shift one bit to right
        }
        return cnt;
    }
};

//-----------------------------------------------
Approach 2
More optimized solution, no. of iteration will be equal to no. of set bits.

class Solution {
public:
    int hammingWeight(uint32_t n) {
        int cnt=0;  // count of set bit
        while(n>0){  // iterate until all bits are traversed
			++cnt;
            n=n&(n-1); // change the first set bit from right to 0
        }
        return cnt;
    }
};

//-----------------------------------------------
Approach 3
Using inbuilt function __builtin_popcount for counting set bits

class Solution {
public:
    int hammingWeight(uint32_t n) {
        return __builtin_popcount(n);
    }
};

//-----------------------------------------------
Approach 4
Using inbuilt function bitset.

class Solution {
public:
    int hammingWeight(uint32_t n) {
        return bitset<32>(n).count();
    }
}

//---------------------------


These are Builtin functions of GCC compiler

__builtin_popcount(x): This function is used to count the number of one’s(set bits) in an integer.

__builtin_parity(x): This function is used to check the parity of a number. This function returns true(1) if the number has odd parity else it returns false(0) for even parity.

__builtin_clz(x): This function is used to count the leading zeros of the integer. Note: clz = count leading zero’s.

__builtin_ctz(x): This function is used to count the trailing zeros of the given integer. Note: ctz = count trailing zeros.

Reference: You can find more examples on geeks for geeks.
P.S: I can't provide you the link or else my post will not be visible to you.
