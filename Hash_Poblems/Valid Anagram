// -------------- sol 1 single hash   
Using Unordered Map
Time Complexity: O(N)
Space Complexity: O(N)


class Solution {
public:
    bool isAnagram(string s, string t) {
        
        
        if(s == t)
        {
            return true ;
        }
        if(s.size() != t.size())
        {
            return false ;
        }
        unordered_map<char , int> hash ;
        
        for(int i = 0 ; i < s.size() ; i++)
        {
             hash[s[i]]++;
             hash[t[i]]--;   // decrement each i to 0
         }
        
        for(auto it : hash)
        {
            if(it.second)
            {
                return false ;
            }
        }
        
        return true ;
    }
};


  //https://www.youtube.com/watch?v=QZmh8-Auqo8

// Time Complexity: O (n)
// Space Complexity: O(n)



//--------------------------------------------sorting   Time Complexity: O(nLogn)


class Solution {
public:
    bool isAnagram(string s, string t) {
        
        int m = s.length() ;
        int l = t.length() ;
        
        if( m != l )
        {
            return false ;
        }
        
        sort(s.begin() , s.end());
        sort(t.begin() , t.end());
        
        
    for(int i = 0 ; i < s.size() ; i++)
    {
        if(s[i] != t[i])
        {
            return false ;
        }
    }
        
        return true ;
        
        
    }
};


//-----------------------------2 hashes 

class Solution {
public:
    bool isAnagram(string s, string t) {
        if (s.size() != t.size()) return false;
        unordered_map<char, int> s_map, t_map;
        for (int i=0; i<s.size(); i++)
        {
            s_map[s[i]]++;
            t_map[t[i]]++;
        }
        return s_map == t_map;
    }
};


/------------------------------------------------------------Using Frequency Array

Time Complexity: O(N)
Space Complexity: O(1), as we are taking 26 char arr, thats why it will be cosidered as a constant space

class Solution {
public:
    bool isAnagram(string s, string t) {
        
        if(s == t)
        {
            return true ;
        }
        
        if(s.size() != t.size())
        {
            return false ;
        }
    
          int umap[26]={};
        
        for(int i = 0 ; i < s.size() ; i++)
        {
            umap[s[i] - 'a']++;   //  c - a = 2 - 0 = 2  like this 
            umap[t[i] - 'a']--;
        }
        
        for(int i = 0 ; i < 26 ; i++)
        {
            if(umap[i])
            {
                return false ;
            }
        }
        
        return true ;
        
        
        
        
        
    }
};


//https://www.youtube.com/watch?v=R3YtsyY3Rmw
