/*
Runtime: 4 ms, faster than 8.77% of C++ online submissions for Implement Queue using Stacks.
Memory Usage: 7.1 MB, less than 47.83% of C++ online submissions for Implement Queue using Stacks

*/

*// ----------------- very slow Approach ---------------


class MyQueue {
public:
    
    stack<int> s1 ;
    stack<int> s2 ;
    
    MyQueue() {
        
    }
    
    void push(int x) {
        
         //s1 to s2
        while(!s1.empty())
          {
           
            s2.push(s1.top());
            s1.pop();
          }
        
        // x to s1
        s1.push(x);
        
        //s2 to s1
         while(!s2.empty())
          {   
            
            s1.push(s2.top());
            s2.pop();
                
                
           }
  
    }
    
    int pop() {
        
        int current = s1.top();
        s1.pop();
        return current;
        
    }
    
    int peek() {
         return s1.top();
        
    }
    
    bool empty() {
         return s1.empty();
    }
};


//----------------------------------------------------------- solution 2 
/*

Runtime: 0 ms, faster than 100.00% of C++ online submissions for Implement Queue using Stacks.
Memory Usage: 7 MB, less than 47.83% of C++ online submissions for Implement Queue using Stacks.

*/

class MyQueue {
public:
    
    stack<int> input, output;
    
    MyQueue() {
        
    }
    
      /** Push element x to the back of queue. */
    void push(int x) {
        input.push(x);
        
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        // shift input to output 
        if(output.empty())
        {
            while(input.size())
            {
                output.push(input.top());
                input.pop();
            }
        }
        
        int x = output.top();
        output.pop();
        return x ;     
    }
    
      /** Get the front element. */
    int peek() {
    
        if(output.empty())
        {
            while(input.size())
            {      // input to output
                output.push(input.top());
                input.pop();
            }
        }
        return output.top();
        
    }
    
    bool empty() {
        return output.empty() && input.empty();
    }
};


