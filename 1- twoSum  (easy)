class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        
        
        //----------------hashmap two pass-------
        
          //key->   the value to be added in the current num 
      //value-> pos
        
      unordered_map<int , int > m1   ;
      vector <int> ans ; 
        
        for (int i = 0 ; i < nums.size() ; i++)
        {
            m1[nums[i]] = i;  //  like m1[2] = 0  &  m1[7] =1  in the array [2,7,11,15]
        }
        
        // walk in the array again 
        for (int i = 0 ; i < nums.size() ; i++)
        {
            int temp = target - nums[i] ;  // like 9 - 2 =  
            
            // look if the target in the map or not 
             // second condition check  //الاندكش بتاع مش زي الاندكش اللي انا عايزة في الماب
            if (m1.find(temp) !=m1.end() && m1[temp] != i )    
            {
                ans.push_back(i) ;  // 0 
                
                ans.push_back(m1[temp]);  // 0         // الاندكس هنجيبة من الماب بتاعت التمب 
                  break ;            
            }
        }
        return ans;
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        //---------------------hashmap onepass Approch---------- the best --------------------------------
        
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        
        unordered_map<int , int> hashmap;
        
         //loop for checking if the complement of the current integer exist in the map
        
        for(int i = 0 ; i < nums.size() ; i++)
        {
             //if complement has found, return current index and index of compliment
            //index of complement is its value in the map
			//with C++20, mappy.contains would probably been better
            
         if(hashmap.count(target-nums[i])){
             
    //return the index of the current integer in the vector , and the index of the complement 
             
             return {i , (hashmap[target - nums[i]])};
         }
            
//if complement has not been passed by yet, modify the complement's value with its index
            
            hashmap[nums[i]]= i ;
        }
        
          //return empty vector if no integers answer found
        
        return {};
        
    }
};
        
        
        
        
        //----------- brute force Approch--------------------
        
        
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        
        vector<int>res ; 
        
        for(int i = 0 ; i < nums.size()-1 ; i++)
        {
            for(int j = i+1 ; j < nums.size() ; j++)
            {
                if(nums[i] + nums[j] == target)
                {
                    res.push_back(i);
                    res.push_back(j);
               
                }
                
               
                
            }
        }
        
        return res;
    }
};
        
