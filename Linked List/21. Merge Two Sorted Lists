//-----------------------------------------------ITERATIVE APPROACH----------------
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        
        ListNode* dummy = new ListNode(-1);
        ListNode* head  = dummy ;
        
        while(list1 !=NULL && list2 !=NULL)
        {
            if(list1->val < list2->val)
            {
                dummy->next = list1;
                list1 = list1->next;
            }
            else
            {
                dummy->next = list2;
                list2 = list2->next;
            }
            dummy = dummy->next ;
        }
        
        //if one of our 2 lists still have numbers loop will break
        if(list1 != NULL)
        {
            dummy->next = list1 ; //list1 now connect to rest of list 
        }
        else
        {
            dummy->next = list2;
        }
        
         // we don't need -1 in our list so head->next 
        return head->next;
    }
};



//----------------------------RECURSIVE APPROACH

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        
        // if list1 happen to be NULL
		// we will simply return list2
        if(list1 == NULL)
        {
            return list2;
        }
        
        // if list2 happen to be NULL
		// we will simply return list1.
        if(list2 == NULL)
        {
             return list1;
        }
        
        // if value pointend by l1 pointer is less than equal to value pointed by l2 pointer
		// we wall call recursively l1 -> next and whole l2 list.
        if(list1->val <= list2->val)
        {
            list1->next = mergeTwoLists(list1->next , list2);
            return list1;
        }
        
        // we will call recursive l1 whole list and l2 -> next
        else
        {
			list2 -> next = mergeTwoLists(list1, list2 -> next);
			return list2;            
		}
        
        
    }
};
