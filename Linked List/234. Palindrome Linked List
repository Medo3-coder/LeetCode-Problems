class Solution {
public:
    bool isPalindrome(ListNode* head) {
        
        if(head == NULL || head->next == NULL)
            return true ;
        
        // find the middle of linkedlist 
        
        ListNode* fast = head ;
        ListNode* slow = head ;
        while(fast->next != NULL && fast->next->next != NULL )
            
        {
            slow = slow->next ;
            fast = fast->next->next ;
        }
        
        
        
        // reverse the right half 
        slow->next = reverseList(slow->next); 
        
        slow = slow->next ;  // to move slow to the first node in the reversed linked list 
        
        
        // check if the left half equal the right half 
        
        while(slow != NULL)
        {
            if (head->val != slow->val)
           
                return false;
                
            head = head->next ;
            slow = slow->next ;
                
        
           
        }
    
        
        return true ;
         
        
    }
           // reverse linked list function 
    ListNode* reverseList(ListNode* head){
        
             ListNode* prev = NULL ;
             ListNode* next = NULL ;
        while(head != NULL)
        {
            next = head->next ;
             head->next = prev ; 
             prev = head ;
             head = next ;
        }
                return prev ; 

        }
    //https://www.youtube.com/watch?v=-DtNInqFUXs
        
        
};
