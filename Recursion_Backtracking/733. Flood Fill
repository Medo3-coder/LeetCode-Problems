//https://www.youtube.com/watch?v=aehEcTEPtCs


class Solution {
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        
        if(image[sr][sc] == newColor)
        {
            return image ;
        }
        
           fill(image, sr ,sc , image[sr][sc] , newColor);
        
        return image;
    }
    
    
    void fill (vector<vector<int>>& image, int sr, int sc, int color, int newColor)
    {
        
            
            
    if(sr < 0 || sc < 0 || sr >= image.size() || sc >= image[0].size() || image[sr][sc]!= color ) 
        {
             return;
        }
        
        image[sr][sc] = newColor;
        
        fill(image, sr-1 ,sc , color , newColor);
        fill(image, sr+1 ,sc , color , newColor);
        fill(image, sr ,sc - 1 , color , newColor);
        fill(image, sr ,sc + 1 , color , newColor);
            
    }
};

/*
Time Complexity: O(N), where N is the number of pixels in the image. We might process every pixel.

Space Complexity: O(N), the size of the implicit call stack when calling dfs.
*/

/*
Runtime: 15 ms, faster than 23.04% of C++ online submissions for Flood Fill.
Memory Usage: 14 MB, less than 80.78% of C++ online submissions for Flood Fill.

*/
